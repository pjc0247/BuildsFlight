using System;
using System.IO;
using System.IO.Compression;
using System.Diagnostics;
using System.Linq;
using System.Net;

using BuildsFlightCore;

namespace Launcher
{
	class MainClass
	{
        private static void ErrorClose(string msg)
        {
            Console.WriteLine(msg);
            Console.Read();

            Environment.Exit(-1);
        }
        private static void DownloadFile(string url, string path)
        {
            WebClient webClient = new WebClient();
            webClient.DownloadFile(url, path);
        }

		public static void Main(string[] args)
		{
			BuildsFlight.Init(
				"AKIAJNLHNGLVGVZ32ZXA", "lC29YKN28u/f4IPeU3CCb+3m6X/D9bcv6r0BKFTS", "ap-northeast-2",
				"s3aad");
			
			if (File.Exists("buildsflight.app") == false)
                ErrorClose("`buildsflight.app` file not found");

			if (Directory.Exists("builds") == false)
				Directory.CreateDirectory("builds");

			var appId = File.ReadAllText("buildsflight.app");
			var app = BuildsFlight.GetApp(appId);
            if (app == null)
                ErrorClose("app not found : " + appId);

            var targetVersion = app.TargetVersion ?? "1.0.0";

            if (args.Contains("--select-version") == false)
            {
                Console.WriteLine("[Select Version]");
                int idx = 1;
                foreach(var build in app.Builds.OrderBy(x => x.Version))
                {
                    Console.WriteLine($"   {idx} - {build.Version}");
                    idx++;
                }

                while (true)
                {
                    Console.WriteLine(">> ");
                    try
                    {
                        var input = int.Parse(Console.ReadLine());
                        targetVersion = app.Builds[input].Version;
                    }
                    catch (Exception) { }
                }
            }

            //app.AddBuild("1.0.2", "https://s3.ap-northeast-2.amazonaws.com/s3aad/simple.zip", "");
            app.SetTargetVersion("1.0.2");

			Console.WriteLine("TargetVersion : " + targetVersion);

			var gameDir = $".\\builds\\{targetVersion}\\";
			if (Directory.Exists(gameDir) == false)
			{
				Directory.CreateDirectory(gameDir);

                var build = app.Builds.First(x => x.Version == targetVersion);

                Console.WriteLine("DownloadBuild : " + build.Url, gameDir + "package.zip");
                DownloadFile(build.Url, gameDir + "package.zip");

                ZipFile.ExtractToDirectory(gameDir + "package.zip", gameDir);
            }

			Process.Start(new ProcessStartInfo()
			{
				FileName = "run.bat", 
				WorkingDirectory = gameDir
			});
		}
	}
}
   